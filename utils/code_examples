123



f"sin({a}) is {sin(a):.3}"



[1, 2, 3]



(1, 2, 3)



{1, 2, 3}



{"a":1, **d}



a



a = 1



del a



a, *b = it



-a



not x



x + y



x or y



1 <= a < 10



func(a, b=c, *d, **e)



a if b else c



snake.colour



(x := 4)



l[1:2, 3]



l[1:2]



[x for x in numbers]



{x: x**2 for x in numbers}



{x for x in numbers}



[ord(c) for line in file for c in line]



(n**2 for n in it if n>5 if n<10)



[i async for i in soc]



a = b = 1



a,b = c



x += 2



raise x from y



assert x,y



del x,y,z



pass



if x:
   ...
elif y:
   ...
else:
   ...



for x in y:
    ...
else:
    ...



while x:
   ...
else:
   ...



for a in b:
    if a > 5:
        break
    else:
        continue



try:
   ...
except Exception:
   ...
except OtherException as e:
   ...
else:
   ...
finally:
   ...



try:
   ...
except* Exception:
   ...



try:
    a + 1
except TypeError:
    pass



with a as b, c as d:
   something(b, d)



lambda x,y: ...



def f(a: 'annotation', b=1, c=2, *d, e, f=3, **g):
    pass



return 4



yield x



yield from x



class Foo(base1, base2, metaclass=meta):
    pass



async def f():
    await other_func()



match x:
    case Point2D(0, 0):
        ...
    case Point3D(x=0, y=0, z=0):
        ...



match x:
    case [x] as y:
        ...
    case _:
        ...



match x:
    case Point2D(0, 0):
        ...
    case Point3D(x=0, y=0, z=0):
        ...



match x:
    case {1: _, 2: _}:
        ...
    case {**rest}:
        ...



match x:
    case [1, 2, *rest]:
        ...
    case [*_]:
        ...



match x:
    case [1, 2]:
        ...



match x:
    case None:
        ...



match x:
    case "Relevant":
        ...



match x:
    case [x] if x>0:
        ...
    case tuple():
        ...



match x:
    case [x] | (y):
        ...